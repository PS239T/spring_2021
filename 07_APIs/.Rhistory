# Create objects holding the key, base url, and response format
key<-"13ff759582b04c6d8050e178b2dc8d0e"
base.url<-"http://api.nytimes.com/svc/search/v2/articlesearch"
response.format<-".json"
# Specify a main search term (q)
search.term<-"on fleek"
# Specify and encode filters (fc)
filter.query<-"body:\"on fleek\""
# NOTE: double quotes within double quotes must be escaped with / so R can parse the character string
print(filter.query) # How R stores the string
cat(filter.query) # How R parses the string
# URL-encode the search and its filters
search.term<-URLencode(URL = search.term, reserved = TRUE)
filter.query<-URLencode(URL = filter.query, reserved = TRUE)
print(search.term)
print(filter.query)
# Paste components together to create URL for get request
get.request<-paste0(base.url, response.format, "?", "q=", search.term, "&fq=", filter.query, "&api-key=", key)
print(get.request)
# Send the GET request using httr package
response<-httr::GET(url = get.request)
print(response)
# Inspect the content of the response, parsing the result as text
response<-httr::content(x = response, as = "text")
substr(x = response, start = 1, stop = 1000)
# Convert JSON response to a dataframe
response.df<-jsonlite::fromJSON(txt = response, simplifyDataFrame = TRUE, flatten = TRUE)
# Inspect the dataframe
str(response.df, max.level = 3)
# Get number of hits
print(response.df$response$meta$hits)
# Write a function to create get requests
nytapi<-function(search.terms=NULL, begin.date=NULL, end.date=NULL, page=NULL,
base.url="http://api.nytimes.com/svc/search/v2/articlesearch",
response.format=".json",
key="13ff759582b04c6d8050e178b2dc8d0e"){
# Combine parameters
params<-list(
c("q", search.terms),
c("begin_date", begin.date),
c("end_date", end.date),
c("page", page)
)
params<-params[sapply(X = params, length)>1]
params<-sapply(X = params, FUN = paste0, collapse="=")
params<-paste0(params, collapse="&")
# URL encode query portion
query<-URLencode(URL = params, reserved = FALSE)
# Combine with base url and other options
get.request<-paste0(base.url, response.format, "?", query, "&api-key=", key)
# Send GET request
response<-httr::GET(url = get.request)
# Parse response to JSON
response<-httr::content(response, "text")
response<-jsonlite::fromJSON(txt = response, simplifyDataFrame = T, flatten = T)
return(response)
}
# Get number of hits, number of page queries
adam<-nytapi(search.terms = "adam rippon", begin.date = 20150101, end.date = 20180220)
hits<-adam$response$meta$hits
print(hits)
round(hits/10)
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
# Get all articles
adam.articles<-sapply(X = 0:61, FUN = function(page){
#cat(page, "")
response<-tryCatch(expr = {
r<-nytapi(search.terms = "adam rippon", begin.date = 20150101, end.date = 20180220, page = page)
r$response$docs
}, error=function(e) NULL)
return(response)
})
# Combine list of dataframes
adam.articles<-adam.articles[!sapply(X = adam.articles, FUN = is.null)]
adam.articles<-plyr::rbind.fill(adam.articles)
adam.articles<-sapply(X = 0:61, FUN = function(page){
#cat(page, "")
response<-tryCatch(expr = {
r<-nytapi(search.terms = "adam rippon", begin.date = 20150101, end.date = 20180220, page = page)
r$response$docs
}, error=function(e) NULL)
return(response)
})
adam.articles<-adam.articles[!sapply(X = adam.articles, FUN = is.null)]
adam.articles<-plyr::rbind.fill(adam.articles)
adam.articles<-dplyr::bind_rows(adam.articles)
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(plyr)
adam.permonth<-ddply(.data = adam.articles, .variables = "year.month", summarize, count=length(year.month))
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth, aes(x = year.month, y = count))+geom_point()+geom_smooth(se=F)+
theme_bw()+xlab(label = "Date")+ylab(label = "Article Count")+ggtitle(label = "Coverage of Adam Rippon")
View(adam.articles)
# Get number of hits, number of page queries
adam<-nytapi(search.terms = "adam rippon", begin.date = 20140101, end.date = 20180220)
hits<-adam$response$meta$hits
print(hits)
round(hits/10)
# Get all articles
adam.articles<-sapply(X = 0:61, FUN = function(page){
#cat(page, "")
response<-tryCatch(expr = {
r<-nytapi(search.terms = "adam rippon", begin.date = 20140101, end.date = 20180220, page = page)
r$response$docs
}, error=function(e) NULL)
return(response)
})
# Combine list of dataframes
adam.articles<-adam.articles[!sapply(X = adam.articles, FUN = is.null)]
adam.articles<-dplyr::bind_rows(adam.articles)
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(plyr)
adam.permonth<-ddply(.data = adam.articles, .variables = "year.month", summarize, count=length(year.month))
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth, aes(x = year.month, y = count))+geom_point()+geom_smooth(se=F)+
theme_bw()+xlab(label = "Date")+ylab(label = "Article Count")+ggtitle(label = "Coverage of Adam Rippon")
adam.permonth<-adam.articles %>%
summarise(year.month=count(length(year.month)))
library(dplyr)
adam.permonth<-adam.articles %>%
summarise(year.month=count(length(year.month)))
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
View(adam.articles)
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
View(adam.articles)
adam.permonth<-adam.articles %>%
summarise(year.month=n(length(year.month)))
adam.permonth<-adam.articles %>%
summarise(year.month=n((year.month)))
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(year.month=n())
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(dplyr)
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth, aes(x = monthly.articles, y = count))+geom_point()+geom_smooth(se=F)+
theme_bw()+xlab(label = "Date")+ylab(label = "Article Count")+ggtitle(label = "Coverage of Adam Rippon")
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
# adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(dplyr)
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth, aes(x = monthly.articles, y = count))+geom_point()+geom_smooth(se=F)+
theme_bw()+xlab(label = "Date")+ylab(label = "Article Count")+ggtitle(label = "Coverage of Adam Rippon")
View(adam.articles)
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
# adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(dplyr)
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_smooth(se=F) +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Adam Rippon")
# Add year-month indicators
adam.articles$year.month<-format(as.Date(adam.articles$pub_date), "%Y-%m")
# adam.articles$year.month<-as.Date(paste0(adam.articles$year.month, "-01"))
# Count articles per month
library(dplyr)
adam.permonth<-adam.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Plot the trend over time
library(ggplot2)
ggplot(data = adam.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Adam Rippon")
skating<-nytapi(search.terms = "ice skating olympics", begin.date = 20100101, end.date = 20180220)
hits<-skating$response$meta$hits
print(hits)
round(hits/10)
# Get number of hits, number of page queries
skating<-nytapi(search.terms = "ice skating olympics", begin.date = 20100101, end.date = 20180220)
hits<-skating$response$meta$hits
print(hits)
round(hits/10)
# Get all articles
skating.articles<-sapply(X = 0:660, FUN = function(page){
#cat(page, "")
response<-tryCatch(expr = {
r<-nytapi(search.terms = "ice skating olympics", begin.date = 20100101, end.date = 20180220, page = page)
r$response$docs
}, error=function(e) NULL)
return(response)
})
# Combine list of dataframes
skating.articles<-skating.articles[!sapply(X = skating.articles, FUN = is.null)]
skating.articles<-dplyr::bind_rows(skating.articles)
# Add year-month indicators
skating.articles$year.month<-format(as.Date(skating.articles$pub_date), "%Y-%m")
# Count articles per month
library(dplyr)
skating.permonth<-skating.articles %>%
group_by(year.month) %>%
summarise(monthly.articles=n())
# Plot the trend over time
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
# Plot the trend over time
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_smooth(method = "lm") +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_line() +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
geom_line(aes(colour="gray30")) +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
library(ggplot2)
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_line() +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
ggplot(data = skating.permonth,
aes(x = year.month, y = monthly.articles)) +
geom_point() +
theme_bw() +
xlab(label = "Date") +
ylab(label = "Article Count") +
ggtitle(label = "Coverage of Olympic Ice Skating")
# Create objects holding the key, base url, and response format
key<-"13ff759582b04c6d8050e178b2dc8d0e"
base.url<-"http://api.nytimes.com/svc/search/v2/articlesearch"
response.format<-".json"
# Specify a main search term (q)
search.term<-"on fleek"
# Specify and encode filters (fc)
filter.query<-"body:\"on fleek\""
# NOTE: double quotes within double quotes must be escaped with / so R can parse the character string
print(filter.query) # How R stores the string
cat(filter.query) # How R parses the string
# URL-encode the search and its filters
search.term<-URLencode(URL = search.term, reserved = TRUE)
filter.query<-URLencode(URL = filter.query, reserved = TRUE)
print(search.term)
print(filter.query)
# Paste components together to create URL for get request
get.request<-paste0(base.url, response.format, "?", "q=", search.term, "&fq=", filter.query, "&api-key=", key)
print(get.request)
# Send the GET request using httr package
response<-httr::GET(url = get.request)
print(response)
# Inspect the content of the response, parsing the result as text
response<-httr::content(x = response, as = "text")
substr(x = response, start = 1, stop = 1000)
# Convert JSON response to a dataframe
response.df<-jsonlite::fromJSON(txt = response, simplifyDataFrame = TRUE, flatten = TRUE)
# Inspect the dataframe
str(response.df, max.level = 3)
# Get number of hits
print(response.df$response$meta$hits)
